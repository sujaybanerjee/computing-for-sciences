
"""
CS150 Fall Lab 3

Name: Sujay Banerjee
Section: A

Creativity:
fools_decrypt, shift, my_encrypt, and my_decrypt
"""


from random import randint, seed

ALPHABET = "abcdefghijklmnopqrstuvwxyz "

#---------------------------------------------------------
# Fools functions


def fools_encrypt(msg):
    """
    Encrypts the message string by adding 3 of each letter in the message to the encrypted string

    Args:
        msg: string to encrypt

    Return:
        Encrypted message string
    """
    secret = ''
    for i in range(len(msg)):
        secret = secret + msg[i]*3 
    return secret


def fools_decrypt(message):
    """
    Decrypts the message created from fools_encrypt

    Args:
        message: string to decrypt

    Return:
        Decrypted message string
    """ 
    return message[::3]

#---------------------------------------------------------
# Caesar's method

def shift_letter(letter, num):
    """
    Shifts a letter up num places in the alphabet with
    wraparound.

    Args:
        letter: A single character
        num: Integer distance to shift letter

    Returns:
        Character in ALPHABET num distance from letter
    """
    # Get the index of the current letter
    index = ALPHABET.find(letter)
    # We use the mod operator (%) for wraparound
    return ALPHABET[(index + num) % len(ALPHABET)]




def caesar_encrypt(msg, shift):
    """
    Encrypts the message string by shifting the alphabet key

    Args:
        msg: string to encrypt
        shift: the number the alphabet is shifted by

    Return:
        Encrypted message string
    """
    secret = ''
    for i in range(len(msg)):
        secret = secret + shift_letter(msg[i], shift)
    return secret
        
        



#---------------------------------------------------------
# Substitution cipher

def splice(message, letter):
    """
    Splices out letter from message and returns the 
    remaining message. letter can only occur ONCE in
    the message
    
    For example:
    >>> splice("abcdefg", "f")
    'abcdeg'

    Args:
        message: String
        letter: A string to be removed from message

    Returns:
        String message with letter removed.
    """
    secret = ''
    for i in range(len(message)):
        secret = message[0:message.find(letter)] + message[message.find(letter)+1:]
    return secret

        



def keygen(password):
    """
    Given a string password, generates a new random key.
    A key consists of a random ordering of the letters in
    ALPHABET.

    Args:
        password: String password used to generate key

    Return:
        Key string
    """
    remaining = ALPHABET
    key = ""
    
    seed(password)
    
    for dummy in range(len(ALPHABET)):
        index = randint(0, len(remaining)-1)
        next_letter = remaining[index]
        key = key + next_letter
        remaining = splice(remaining, next_letter)
    
    return key
    
# TODO: Fill in your substitution functions here

def subst_encrypt(msg, key):
    """
    Encrypts the message using the key 

    Args:
        msg: string to encrypt
        key: key generated by keygen 

    Return:
        Encrypted message string
    """
    secret = ''
    for i in msg:
        index = ALPHABET.find(i)
        secret = secret + key[index]
    return secret
    
    
def subst_decrypt(encrypted, key):
    """
    Encrypts the message using the key 

    Args:
        encrypted: string to decrypt
        key: key generated by keygen 

    Return:
        Decrypted message string
    """
    secret = ''
    for i in encrypted:
        index = key.find(i)
        secret = secret + ALPHABET[index]
    return secret



def shift(num):
    """
    Shifts the alphabet by num

    Args:
        num: number the alphabet is shifted by (int)

    Return:
        Alphabet shifted over by num
    """
    string = ''
    for i in ALPHABET:
        string = string + shift_letter(i, num)
    return string


def my_encrypt(msg, shift):
    """
    Encrypts the message using fools_encrypt and caesar_encrypt 

    Args:
        msg: string to encrypt
        shift: the number the alphabet is shifted by

    Return:
        Encrypted message string
    """
    secret = fools_encrypt(msg)
    secret = caesar_encrypt(secret, shift)
    secret = secret[::-1]
    return secret

def my_decrypt(msg, shift):
    """
    Decrypts the message from my_encrypt using fools_encrypt and caesar_encrypt 

    Args:
        msg: string to encrypt
        shift: the number the alphabet is shifted by

    Return:
        Decrypted message string
    """
    secret = my_encrypt(msg, shift)
    s = secret[::-1]
    s = caesar_encrypt(secret, shift)
    s = fools_decrypt(secret)
    s = s[::3]
    return s